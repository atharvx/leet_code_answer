283.Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:

Input: nums = [0]
Output: [0]
 
Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

Solution:-
Answer in C++

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j = 0; 
    for (int i = 0; i < nums.size(); i++) {
        if (nums[i] != 0) {
            if (i != j) {
                swap(nums[i], nums[j]);
            }
            j++; 
        }
    }
}
};

Answer in Python3

def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        j=0
        for i in range(len(nums)):
            if (nums[i] != 0):
                if(i != j):
                    tmp=nums[i]
                    nums[i]=nums[j]
                    nums[j]=tmp
                j=j+1

Answer in Golang:-

func moveZeroes(nums []int)  {
    j:=0
    for i :=0;i < len(nums);i++{
        if nums[i] != 0 {
            if (i != j){
                tmp:=nums[i]
                nums[i]=nums[j]
                nums[j]=tmp
            }
            j=j+1
        }
    }
    
}
