70.You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

solution -->
# Code Solution in Go lang
func climbStairs(n int) int {
    if n<=0{
        return 0
    }else if n==1{
        return 1
    }else if n==2{
        return 2
    }
    f:=1
    l:=2
    next_1:=0
    for i:=3;i<=n;i=i+1{
        next_1 =f+l
        f =l
        l = next_1
    }
    return next_1
}

#code Solution in c++

class Solution {
public:
    int climbStairs(int n) {
        int f=1,l=2,i,next;
        if(n<=0)
        {
            return 0;
        }  
        else if(n==1)
        {
            return 1;
        }      
        else if(n==2)
        {
            return 2;
        }
        for(i=3;i<=n;i++)
        {
            next=f+l;
            f=l;
            l=next;
        }
        return next;
    }
};

# code Solution in python3

class Solution:
    def climbStairs(self, n: int) -> int:
        if(n<=0):
            return 0
        elif(n<=1):
            return 1
        elif(n<=2):
            return 2
        f=1
        l=2
        i=3
        while(i<=n):
            n_term=f+l
            f=l
            l=n_term
            i=i+1
        return n_term
