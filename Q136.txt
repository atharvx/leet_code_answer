136. Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1
 
solution -->

In Go lang:-

func singleNumber(nums []int) int {
    temp :=0
    for i:=0;i<len(nums);i++{
        temp^=nums[i]
    }
    return temp
}

In python3:-

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        temp=0
        for num in nums:
            temp ^= num
        return temp

In Cpp:-

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int temp=0;
        for(int i=0;i<nums.size();i++){
            temp ^=nums[i];
        }
        return temp;
        
    }
};

